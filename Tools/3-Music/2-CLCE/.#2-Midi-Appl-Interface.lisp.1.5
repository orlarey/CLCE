;;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/;;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\;;;;;;                                  MidiShare-Appl-Interface.lisp;;;;                                     © 2001, GRAME.;;;;;;;;;;;;  Fichier reprend et etend l'ensemble des fonctions de MidiShare liees aux;;  applications.;;;;  CONVENTION D'ECRITURE : ;;  De même que dans MidiShare toutes les fonctions ont un nom de la forme "midixxyy",;;  toutes les fonctions definis ici auront un nom de la forme "midi-xx-yy".;;;; HISTORIQUE :;;  14-06-01, Premiere version. SL;;  27-06-01, Ajout du code relatif a la version linux (non termine);;--------------------------------------------------------------------------;; Interface for MCL on MacIntosh;;--------------------------------------------------------------------------#+(and apple mcl powerpc);;                             packages, importations et exportations;;========================================================================================#-:CCL-4.3.1(eval-when (:compile-toplevel :load-toplevel :execute)  (require :ff)  (ff-load (make-pathname :directory *auto-dir* :name "alarm.c.o")           :ffenv-name 'alarm           :replace t))#+(and apple mcl powerpc)#-:CCL-5.0b(progn(defun macho-fp-for-cfm-fp (cfmfp)  (let* ((template (list #x3D800000 #x618C0000 #x800C0000                          #x804C0004 #x7C0903A6 #x4E800420))         (template-size #.(* 6 4))         (mfp (#_newptr template-size)))    (%put-long mfp               (logior (elt template 0)                       (ash (%ptr-to-int cfmfp) -16)))    (%put-long mfp               (logior (elt template 1)                       (logand (%ptr-to-int cfmfp)                               #xFFFF))               4)    (loop for i from 2 to 5          do          (%put-long mfp (elt template i) (* i 4)))    (#_makedataexecutable mfp template-size)    mfp))(defmacro disable-interrupts (&body body)  `(without-interrupts ,@body));;...................................................................: set-appl-alarm;; TO BE COMPLETED(defun set-appl-alarm (ref callback)  (declare (ignore ref callback))  (error "set-appl-alarm not supported")  ) 	;;...................................................................: remove-appl-alarm(defun remove-appl-alarm (ref)  (declare (ignore ref))  (error "remove-appl-alarm not supported")  )     	(defccallable call-alarm-int (:word refnum :long code)  (without-interrupts   (if-self refnum            (if (my applalarm)              (funcall (my applalarm) self code))            ())))(defvar call-alarm  (macho-fp-for-cfm-fp   (ccl:pref (ccl:pref call-alarm-int :RoutineDescriptor.RoutineRecords)             :RoutineRecord.ProcDescriptor)));;                                   Gestion des taches;;========================================================================================;;...................................................................: call-task(defccallable call-task-int (:long date :word refnum :long tasknum :long arg2 :long arg3)  (declare (ignore date arg2 arg3))  (without-interrupts   (let ((self (midi-get-lisp-appl refnum))         task)     (when self       (with-slots (tasktbl freetbl) self         (setq task (aref tasktbl tasknum))         (unless (numberp task)           (setf (aref tasktbl tasknum) freetbl)           (setf freetbl tasknum)           (apply (car task) (cdr task))))))))(defvar call-task  (macho-fp-for-cfm-fp   (ccl:pref (ccl:pref call-task-int :RoutineDescriptor.RoutineRecords)             :RoutineRecord.ProcDescriptor))));;                         Animation des midi-appl en tache de fond;;========================================================================================;; essai pour Robert Pascal (YO 19/05/98);;---------------------------------------;; le principe est le suivant : plutot que de mettre les traitements dans un process, ;; ils sont mis dans la fonction appelee par le system pour savoir s'il faut reveiller le ;; process. Le process lui meme est donc toujours bloque !!!(defvar *midishare-process*)(defun midishare-process ()  (loop (process-wait "midishare background process" #'process-events-or-tasks-p)))(defun install-background ()  (setq *idle-sleep-ticks* 0)  (setq *foreground-sleep-ticks* 0)  (setq *background-sleep-ticks* 0)  (setf *midishare-process* (process-run-function '(:name "midishare-process" :priority 2) #'midishare-process )));;...................................................................: remove-background(defun remove-background ()  (if *midishare-process*    (process-kill *midishare-process*))  (setf *midishare-process* nil));;---------------------------------------------------------------------------------;; 			    Interface for CMULisp on Linux;;---------------------------------------------------------------------------------#+(and linux cmu)(progn(defmacro disable-interrupts (&body body)  `(system:without-interrupts ,@body));;...................................................................: set-appl-alarm;(deffcfun (set-appl-alarm "SetApplAlarm") ((fixnum :long) (t :ptr))       	;  :novalue);;...................................................................: remove-appl-alarm;(deffcfun (remove-appl-alarm "RemoveApplAlarm") ((fixnum :long))       	;  :novalue);(defpascal call-alarm (:long date :word refnum :long code :long arg2 :long arg3);  (declare (ignore  date arg2 arg3));  (without-interrupts;   (if-self refnum;           (if (my applalarm);             (funcall (my applalarm) self code));           ())));;                                   Gestion des taches;;========================================================================================(defun call-task (date refnum tasknum arg2 arg3)  (declare (ignore date arg2 arg3))  (system:without-interrupts   (let ((self (midi-get-lisp-appl refnum))         task)     (when self       (with-slots (tasktbl freetbl) self         (setq task (aref tasktbl tasknum))         (unless (numberp task)           (setf (aref tasktbl tasknum) freetbl)           (setf freetbl tasknum)           (apply (car task) (cdr task))))))));;                         Animation des midi-appl en t‚che de fond;;========================================================================================(defvar *midishare-process*)(defun midishare-process () ;;.......................................................................!! MODIF 25/06 !!  (loop (mp:process-wait "midishare background process" #'process-events-or-tasks-p)  ))(defun install-background () ;;......................................................................!! MODIF 25/06 !!  (setq *idle-sleep-ticks* 0)  (setq *foreground-sleep-ticks* 0)  (setq *background-sleep-ticks* 0)  (setf *midishare-process* (mp:make-process #'midishare-process)));;...................................................................: remove-background(defun remove-background () ;;.......................................................................!! MODIF 25/06 !!  (if *midishare-process*    (mp:destroy-process *midishare-process*))  (setf *midishare-process* nil)))      ;; End of CMULisp interface