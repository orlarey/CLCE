;;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/;;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\;;;;;;                                  Midi-Score-Interface.lisp;;;;                                     © 2001, GRAME.;;;;;;;;;;;;  Fichier definissant les objets score, des sequences ˆ la MidiLogo, parties dependantes Macintosh;;;;;; HISTORIQUE :;;  14-06-01, Premiere version. SL;;  27-06-01, Ajout du code correspondant a la version linux;;--------------------------------------------------------------------------;; Interface for MCL on MacIntosh;;--------------------------------------------------------------------------#+(and apple mcl powerpc)#-:CCL-4.3.1(eval-when (:compile-toplevel :load-toplevel :execute)  (require 'ff)  (ff-load (make-pathname :directory *auto-dir* :name "MidiScore.c.o")           :entry-names '("SClearAll" "SFree" "SNew" "SCurDate"                           "SPrevPos" "SNextPos" "SPrevEv" "SNextEv" "SSize" "SDuration" "SGoBeginDate"                           "SGoEndDate" "SGoBeforePos" "SGoAfterPos" "SMoveAtDate" "SForwardRead" "SBackwardRead" "SForwardWrite" "SBackwardWrite"                           "SRemoveEv" "SCopy" "SCut" "SSplice" "SMix" "SInsert" "STransform" "SSort" "SMatchKeyOff")           :ffenv-name 'MidiScore           :replace t)  )#+(and apple mcl powerpc)#-:CCL-5.0b(progn(defmacro SClearAll (score)  `(ccl::ppc-ff-call (get-fun-addr "SClearAll" *clce-framework*)                        :address ,score                       :void))(defmacro SFree (score)  `(ccl::ppc-ff-call (get-fun-addr "SFree" *clce-framework*)                        :address ,score                       :void))(defmacro SNew ()  `(ccl::ppc-ff-call (get-fun-addr "SNew" *clce-framework*)                        :address));;...................................................................: information(defmacro SCurDate (score)  `(ccl::ppc-ff-call (get-fun-addr "SCurDate" *clce-framework*)                        :address ,score                       :signed-fullword))(defmacro SPrevPos (score)  `(ccl::ppc-ff-call (get-fun-addr "SPrevPos" *clce-framework*)                        :address ,score                       :signed-fullword))(defmacro SNextPos (score)  `(ccl::ppc-ff-call (get-fun-addr "SNextPos" *clce-framework*)                        :address ,score                       :signed-fullword))(defmacro SPrevEv (score)  `(ccl::ppc-ff-call (get-fun-addr "SPrevEv" *clce-framework*)                        :address ,score                       :address))(defmacro SNextEv (score)  `(ccl::ppc-ff-call (get-fun-addr "SNextEv" *clce-framework*)                        :address ,score                       :address));...................................................................: autres informations(defmacro SSize (score sel dur len)  `(ccl::ppc-ff-call (get-fun-addr "SSize" *clce-framework*)                        :address ,score                       :address ,sel                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword));; A VERIFIER(defmacro SDuration (score sel dur len a)  `(ccl::ppc-ff-call (get-fun-addr "SDuration" *clce-framework*)                        :address ,score                       :address ,sel                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword ,a                       :signed-fullword));;...................................................................: deplacements absolus(defmacro SGoBeginDate (score len)  `(ccl::ppc-ff-call (get-fun-addr "SGoBeginDate" *clce-framework*)                      :address ,score                     :signed-fullword ,len                     :signed-fullword))(defmacro SGoEndDate (score len)  `(ccl::ppc-ff-call (get-fun-addr "SGoEndDate" *clce-framework*)                      :address ,score                     :signed-fullword ,len                     :signed-fullword))(defmacro SGoBeforePos (score sel len)  `(ccl::ppc-ff-call (get-fun-addr "SGoBeforePos" *clce-framework*)                      :address ,score                     :address ,sel                     :signed-fullword ,len                     :signed-fullword))(defmacro SGoAfterPos (score len)  `(ccl::ppc-ff-call (get-fun-addr "SGoAfterPos" *clce-framework*)                      :address ,score                     :signed-fullword ,len                     :signed-fullword))(defmacro SMoveAtDate (score sel len)  `(ccl::ppc-ff-call (get-fun-addr "SMoveAtDate" *clce-framework*)                      :address ,score                     :address ,sel                     :signed-fullword ,len                     :signed-fullword));;...................................................................: modifications(defmacro SForwardRead (score)  `(ccl::ppc-ff-call (get-fun-addr "SForwardRead" *clce-framework*)                        :address ,score                       :address))(defmacro SBackwardRead (score)  `(ccl::ppc-ff-call (get-fun-addr "SBackwardRead" *clce-framework*)                        :address ,score                       :address))(defmacro SForwardWrite (score ev)  `(ccl::ppc-ff-call (get-fun-addr "SForwardWrite" *clce-framework*)                        :address ,score                       :address ,ev                       :address))(defmacro SBackwardWrite (score ev)  `(ccl::ppc-ff-call (get-fun-addr "SBackwardWrite" *clce-framework*)                        :address ,score                       :address ,ev                       :address))(defmacro SRemoveEv (score)  `(ccl::ppc-ff-call (get-fun-addr "SRemoveEv" *clce-framework*)                        :address ,score                       :address));;...................................................................: couper, copier,...(defmacro SCopy (score dest sel dur len)  `(ccl::ppc-ff-call (get-fun-addr "SCopy" *clce-framework*)                        :address ,score                       :address ,dest                       :address ,sel                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword))(defmacro SCut (score dest sel dur len)  `(ccl::ppc-ff-call (get-fun-addr "SCut" *clce-framework*)                        :address ,score                       :address ,dest                       :address ,sel                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword))(defmacro SSplice (score sel dur len)  `(ccl::ppc-ff-call (get-fun-addr "SSplice" *clce-framework*)                        :address ,score                       :address ,sel                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword))(defmacro SMix (score dest sel trs dur len)  `(ccl::ppc-ff-call (get-fun-addr "SMix" *clce-framework*)                        :address ,score                       :address ,dest                       :address ,sel                       :address ,trs                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword))(defmacro SInsert (score dest sel trs dur len)  `(ccl::ppc-ff-call (get-fun-addr "SInsert" *clce-framework*)                        :address ,score                       :address ,dest                       :address ,sel                       :address ,trs                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword));;...................................................................: transformations musicales(defmacro STransform (score sel trs dur len)  `(ccl::ppc-ff-call (get-fun-addr "STransform" *clce-framework*)                        :address ,score                       :address ,sel                       :address ,trs                       :signed-fullword ,dur                       :signed-fullword ,len                       :signed-fullword))(defmacro SSort (score)  `(ccl::ppc-ff-call (get-fun-addr "SSort" *clce-framework*)                      :address ,score                     :void))(defmacro SMatchKeyOff (score)  `(ccl::ppc-ff-call (get-fun-addr "SMatchKeyOff" *clce-framework*)                      :address ,score                     :signed-fullword));;...................................................................: c-select(defccallable c-select-int (:ptr e :word)  (declare (special *selection*))  (if (or (null *selection*) (funcall *selection* e)) 1 0))(defvar  c-select  (macho-fp-for-cfm-fp   (ccl:pref (ccl:pref c-select-int :RoutineDescriptor.RoutineRecords)             :RoutineRecord.ProcDescriptor)));;...................................................................: c-transform(defccallable c-transform-int (:ptr e :void)  (declare (special *transformation*))  (funcall *transformation* e))(defvar c-transform  (macho-fp-for-cfm-fp   (ccl:pref (ccl:pref c-transform-int :RoutineDescriptor.RoutineRecords)             :RoutineRecord.ProcDescriptor))))#-:CCL-4.3.1(progn;;                              Interface pour les fonctions C de MidiScore.c.o;;========================================================================================;;...................................................................: creation & destruction(deffcfun (SClearAll "SClearAll") ((t :ptr))    ; le score ˆ effacer  :novalue)(deffcfun (SFree "SFree") ((t :ptr))       	; le score ˆ detruire  :novalue)(deffcfun (SNew "SNew") ()			; pas de parametres  :ptr)						; renvoie un nouveau score;;...................................................................: information(deffcfun (SCurDate "SCurDate") ((t :ptr)) :long)	(deffcfun (SPrevPos "SPrevPos") ((t :ptr)) :long)					(deffcfun (SNextPos "SNextPos") ((t :ptr)) :long)						(deffcfun (SPrevEv "SPrevEv") ((t :ptr)) :ptr)				(deffcfun (SNextEv "SNextEv") ((t :ptr)) :ptr)			 ;;...................................................................: autres informations;;                         score     fsel    dur           len(deffcfun (SSize "SSize") ((t :ptr)(t :ptr)(fixnum :long)(fixnum :long)) :long)			 (deffcfun (SDuration "SDuration") ((t :ptr)(t :ptr)(fixnum :long)(fixnum :long)(fixnum :long)) :long)			 ;;...................................................................: deplacements absolus;;                                       score       deplacmt(deffcfun (SGoBeginDate "SGoBeginDate") ((t :ptr) (fixnum :long)) :long)	(deffcfun (SGoEndDate "SGoEndDate") ((t :ptr) (fixnum :long)) :long)	(deffcfun (SGoBeforePos "SGoBeforePos") ((t :ptr) (t :ptr) (fixnum :long)) :long)	(deffcfun (SGoAfterPos "SGoAfterPos") ((t :ptr) (fixnum :long)) :long)	(deffcfun (SMoveAtDate "SMoveAtDate") ((t :ptr) (t :ptr) (fixnum :long)) :long);;...................................................................: modifications(deffcfun (SForwardRead "SForwardRead") ((t :ptr)) :ptr)					(deffcfun (SBackwardRead "SBackwardRead") ((t :ptr)) :ptr)					(deffcfun (SForwardWrite "SForwardWrite") ((t :ptr)(t :ptr)) :long)					(deffcfun (SBackwardWrite "SBackwardWrite") ((t :ptr)(t :ptr)) :long)					(deffcfun (SRemoveEv "SRemoveEv") ((t :ptr)) :ptr)					;;...................................................................: couper, copier,...;;					source   dest  selection  duree	 len(deffcfun (SCopy "SCopy") ((t :ptr)(t :ptr)(t :ptr) (fixnum :long) (fixnum :long)) :long);;					source   dest  selection  duree	 len(deffcfun (SCut "SCut") ((t :ptr)(t :ptr)(t :ptr) (fixnum :long) (fixnum :long)) :long)				;;				source   dest      duree	 len(deffcfun (SSplice "SSplice") ((t :ptr)(t :ptr)(fixnum :long)(fixnum :long)) :long)				;;			source   dest   selfctn transfct      duree	 len(deffcfun (SMix "SMix") ((t :ptr)(t :ptr)(t :ptr)(t :ptr) (fixnum :long)(fixnum :long)) :long)(deffcfun (SInsert "SInsert") ((t :ptr)(t :ptr)(t :ptr)(t :ptr) (fixnum :long)(fixnum :long)) :long);;...................................................................: transformations musicales(deffcfun (STransform "STransform") ((t :ptr)(t :ptr)(t :ptr) (fixnum :long)(fixnum :long)) :long)(deffcfun (SSort "SSort") ((t :ptr)) :novalue)(deffcfun (SMatchKeyOff "SMatchKeyOff") ((t :ptr)) :long);;...................................................................: c-select(defccallable c-select (:ptr e :word)  (declare (special *selection*))  (if (or (null *selection*) (funcall *selection* e)) 1 0));;...................................................................: c-transform(defccallable c-transform (:ptr e :void)  (declare (special *transformation*))  (funcall *transformation* e)))    ;; End of MCL interface;;---------------------------------------------------------------------------------;; 			    Interface for CMULisp on Linux;;---------------------------------------------------------------------------------#+(and linux cmu)(eval-when (:compile-toplevel :load-toplevel :execute);;.............................................. !! FAIT LE 21/06 !!..........*  (let ((*warn-if-redefine* nil))    (load-foreign "/usr/lib/libCLCE.so"  )    (use-package "ALIEN"                 )    (use-package "C-CALL"                )  ))#+(and linux cmu)(progn(def-alien-type ScorePtr (* t))  ;;....................................................................!! FAIT LE 21/06 !!..........*;;                              Interface pour les fonctions C de MidiScore.c.o;;========================================================================================;;...................................................................: création & destruction(declaim (inline SClearAll))(def-alien-routine "SClearAll" void  ;;................................................................!! MODIF 21/06 !!............*  (p ScorePtr)    ; le score à effacer)(declaim (inline SFreee))(def-alien-routine "SFree" void  ;;....................................................................!! MODIF 21/06 !!............*  (p ScorePtr)    ; le score à détruire)(declaim (inline SNew))(def-alien-routine "SNew" ScorePtr  ;;.................................................................!! MODIF 21/06 !!............*)	; pas de paramètres - renvoie un nouveau score;;...................................................................: information(declaim (inline SCurDate))(def-alien-routine "SCurDate" long  ;;.................................................................!! MODIF 21/06 !!............*  (p ScorePtr))	(declaim (inline SprevPos))(def-alien-routine "SPrevPos" long  ;;.................................................................!! MODIF 21/06 !!............*  (p ScorePtr))					(declaim (inline SNextPos))(def-alien-routine "SNextPos" long  ;;.................................................................!! MODIF 21/06 !!............*  (p ScorePtr))						(declaim (inline SprevEv))(def-alien-routine "SPrevEv" MidiEvPtr  ;;.............................................................!! MODIF 21/06 !!............*  (p ScorePtr))				(declaim (inline SNextEv))(def-alien-routine "SNextEv" MidiEvPtr  ;;.............................................................!! MODIF 21/06 !!............*  (p ScorePtr))			 ;;...................................................................: autres informations;;                     paramètres : (score) (fsel) (dur) (len);(declaim (inline SSize));(def-alien-routine "SSize" long ;;.....................................................................********* type du 2nd t;  (p1 ScorePtr) (p2 :ptr) (fixnum1 long) (fixnum2 long);)			 ;(declaim (inline SDuration));(def-alien-routine "SDuration" long ;;.................................................................********* type du 2nd t;  (p1 ScorePtr) (p2 :ptr) (fixnum1 long) (fixnum2 long) (fixnum3 long);)			 ;;...................................................................: déplacements absolus;;                                       score       deplacmt(declaim (inline SGoBeginDate))(def-alien-routine "SGoBeginDate" long ;;..............................................................!! MODIF 21/06 !!............*  (p ScorePtr) (fixnum long))	(declaim (inline SGoEndDate))(def-alien-routine "SGoEndDate" long ;;................................................................!! MODIF 21/06 !!............*  (p ScorePtr) (fixnum long))	;(declaim (inline SGoBeforePos));(def-alien-routine "SGoBeforePos" long ;;..............................................................********** type des params;  (p1 :ptr) (p2 :ptr) (fixnum long);)	;(declaim (inline SGoAfterPos));(def-alien-routine "SGoAfterPos" long ;;...............................................................********** type des params;  (p :ptr) (fixnum long);)	;(declaim (inline SMoveAtDate));(def-alien-routine "SMoveAtDate" long ;;...............................................................********** type des params;  (p1 :ptr) (p2 :ptr) (fixnum long););;...................................................................: modifications(declaim (inline SForwardRead))(def-alien-routine "SForwardRead" MidiEvPtr ;;.........................................................!! MODIF 21/06 !!............*  (p ScorePtr))					(declaim (inline SBackWardRead))(def-alien-routine "SBackwardRead" MidiEvPtr ;;........................................................!! MODIF 21/06 !!............*  (p ScorePtr))					(declaim (inline SForwardWrite))(def-alien-routine "SForwardWrite" long ;;.............................................................!! MODIF 21/06 !!............*  (p1 ScorePtr) (p2 MidiEvPtr))(declaim (inline SBackwardWrite))(def-alien-routine "SBackwardWrite" long ;;............................................................!! MODIF 21/06 !!............*  (p1 ScorePtr) (p2 MidiEvPtr))					;(declaim (inline SRemoveEv));(def-alien-routine "SRemoveEv" ptr ?? ;;...............................................................********** types param et renvoyé;  (p ptr ??);)					;;...................................................................: couper, copier,...;;					source   dest  selection  durée	 len;(declaim (inline SCopy));(def-alien-routine "SCopy" long ;;.....................................................................********** type du 3ème t;  (p1 ScorePtr) (p2 ScorePtr) (p3 :ptr) (fixnum1 long) (fixnum2 long););;					source   dest  selection  durée	 len;(declaim (inline SCut));(def-alien-routine "SCut" long  ;;.....................................................................********** type du 3ème t;  (p1 ScorePtr) (p2 ScorePtr) (p3 :ptr) (fixnum1 long) (fixnum2 long);)				;;				source   dest      durée	 len;(declaim (inline SSplice));(def-alien-routine "SSplice" long ;;...................................................................********** A verifier;  (p1 ScorePtr) (p2 ScorePtr) (fixnum1 long) (fixnum2 long);)				;;			source   dest   selfctn transfct      durée	 len;(declaim (inline SMix));(def-alien-routine "SMix" long ;;......................................................................********** Type des params;  (p1 ScorePtr) (p2 ScorePtr) (p3 :ptr) (p4 :ptr) (fixnum1 long) (fixnum2 long););(declaim (inline SInsert));(def-alien-routine "SInsert" long ;;...................................................................********** Type des params;  (p1 ScorePtr) (p2 ScorePtr) (p3 :ptr) (p4 :ptr) (fixnum1 long) (fixnum2 long););;...................................................................: transformations musicales;(declaim (inline STransform));(def-alien-routine "STransform" long ;;................................................................********** Type des params;  (p1 :ptr)(p2 :ptr)(p3 :ptr) (fixnum1 long) (fixnum2 long);)(declaim (inline SSort))(def-alien-routine "SSort" void ;;.....................................................................!! MODIF 21/06 !!............*  (p ScorePtr))(declaim (inline SMatchKeyOff))(def-alien-routine "SMatchKeyOff" long ;;..............................................................!! MODIF 21/06 !!............*  (p ScorePtr));;...................................................................: c-select;(defccallable ;;;;;;;;;  Fichier definissant les objets score, des sequences ˆ la MidiLogo, parties dependantes Macintosh;;;;;; HISTORIQUE :;;  14-06-01, Premiere version. SL;;  27-06-01, Ajout du code correspondant a la version linux;;--------------------------------------------------------------------------;; Interface for MCL on MacIntosh;;--------------------------------------------------------------------------#+(and apple mcl powerpc) (:ptr e :word);  (declare (special *selection*));  (if (or (null *selection*) (funcall *selection* e)) 1 0));;...................................................................: c-transform;(defccallable c-transform (:ptr e :void);  (declare (special *transformation*));  (funcall *transformation* e)))    ;; End of CMULisp interface